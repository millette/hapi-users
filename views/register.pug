extends ./_layout.pug

block content
  style.
    fieldset.hidden {
      display: none;
    }

    .row.roshambo input[type="radio"] {
      /*visibility: hidden;*/
    }

    .row.roshambo input[type="radio"] + label {
      width: 100%;
      text-align: center;
      /* FIXME */
      min-height: 240px;
      background-color: #f8f8ff;
      -webkit-transition: background-color 0.25s 0.25s;
      transition: background-color 0.25s 0.25s;
    }

    .row.roshambo input[type="radio"]:checked + label {
      background-color: transparent;
      font-weight: bold;
      font-size: 120%;
    }

    .row.roshambo input[type="radio"] + label > img {
      -webkit-transition: width 0.25s;
      transition: width 0.25s;
      width: 70%;
      max-width: 200px;
    }

    .row.roshambo input[type="radio"]:checked + label > img {
      width: 90%;
    }

    .row.roshambo img.flipped {
      -moz-transform: scaleX(-1);
      -o-transform: scaleX(-1);
      -webkit-transform: scaleX(-1);
      transform: scaleX(-1);
      filter: FlipH;
      -ms-filter: "FlipH";
      width: 90%;
    }

  h1 Register

  h2 Créer votre compte

  form#yup(data-abide novalidate method='post')
    div(data-abide-error class="alert callout" style="display: none;")
      p: i(class="fi-alert") There are some errors in your form.

    .row
      div(class="small-12 columns")
        label Name
          input(type="text" data-validator="available_name" name="name" placeholder="1234" aria-describedby="exampleHelpText" required)
          span(class="form-error") Yo, you had better fill this out, it's required.
        p(class="help-text" id="exampleHelpText") Here's how you use this input field!

      div(class="small-12 columns")
        label Email
          input(type="email" data-validator="available_email" name="email" placeholder="Use me, or don't" aria-describedby="exampleHelpTex")
          span(class="form-error") Email is already in use. Make sure you don't already have an account.
        p(class="help-text" id="exampleHelpTex") Optional email.

      div(class="small-12 columns")
        label Password Required
          input(type="password" name='pw' id="password" placeholder="yeti4preZ" aria-describedby="exampleHelpText" required)
          span(class="form-error") I'm required!
        p(class="help-text" id="exampleHelpText") Enter a password please.

      div(class="small-12 columns")
        label Re-enter Password
          input(type="password" name='pw2' placeholder="yeti4preZ" aria-describedby="exampleHelpText2" required pattern="alpha_numeric" data-equalto="password")
          span(class="form-error") Hey, passwords are supposed to match!
        p(class="help-text" id="exampleHelpText2") This field is using the `data-equalto="password"` attribute, causing it to match the password field above.

      fieldset(class="small-12 columns hidden")
        .row.column
          br
          p Ne jouez pas contre le robot! <i>C'est une attrape anti-spam.</i>

        .row.roshambo
          div(class="small-3 columns")
            input(type='radio' name='roshambo2' value='roche' id='roshambo2Roche' required)
            label(for='roshambo2Roche') Roche
              br
              img(src='https://upload.wikimedia.org/wikipedia/commons/thumb/7/7e/Rock-paper-scissors_%28rock%29.png/240px-Rock-paper-scissors_%28rock%29.png' alt='Roche' title='Roche')

          div(class="small-3 columns")
            input(type='radio' name='roshambo2' value='papier' id='roshambo2Papier' required)
            label(for='roshambo2Papier') Papier
              br
              img(src='https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Rock-paper-scissors_%28paper%29.png/240px-Rock-paper-scissors_%28paper%29.png' alt='Papier' title='Papier')

          div(class="small-3 columns")
            input(type='radio' name='roshambo2' value='ciseau' id='roshambo2Ciseau' required)
            label(for='roshambo2Ciseau') Ciseau
              br
              img(src='https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Rock-paper-scissors_%28scissors%29.png/240px-Rock-paper-scissors_%28scissors%29.png' alt='Ciseau' title='Ciseau')

          div(class="small-3 columns")
            img(src='http://revealproject.eu/wp-content/uploads/Image-blog-on-automated-journalism-700x325.png')

      fieldset(class="small-12 columns")
        p Dans le but de prévenir le <i>spam</i>, je vous propose une petite partie de Roche-Papier-Ciseau.
        p Pouvez-vous battre ma main? <i>J'ai déjà joué.</i>
        .row.roshambo
          div(class="small-3 columns")
            input(type='radio' name='roshambo' value='roche' id='roshamboRoche' required)
            label(for='roshamboRoche') Roche
              br
              img(src='https://upload.wikimedia.org/wikipedia/commons/thumb/7/7e/Rock-paper-scissors_%28rock%29.png/240px-Rock-paper-scissors_%28rock%29.png' alt='Roche' title='Roche')

          div(class="small-3 columns")
            input(type='radio' name='roshambo' value='papier' id='roshamboPapier' required)
            label(for='roshamboPapier') Papier
              br
              img(src='https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Rock-paper-scissors_%28paper%29.png/240px-Rock-paper-scissors_%28paper%29.png' alt='Papier' title='Papier')

          div(class="small-3 columns")
            input(type='radio' name='roshambo' value='ciseau' id='roshamboCiseau' required)
            label(for='roshamboCiseau') Ciseau
              br
              img(src='https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Rock-paper-scissors_%28scissors%29.png/240px-Rock-paper-scissors_%28scissors%29.png' alt='Ciseau' title='Ciseau')

          div(class="small-3 columns")
            img.flipped(src='https://upload.wikimedia.org/wikipedia/commons/thumb/7/7e/Rock-paper-scissors_%28rock%29.png/240px-Rock-paper-scissors_%28rock%29.png' alt='Vous devez battre Roche' title='Vous devez battre Roche')
            | Roche

    br
    .row
      fieldset(class="small-6 columns")
        button(class="button" type="submit" value="Submit") Submit
      fieldset(class="small-6 columns")
      button(class="button" type="reset" value="Reset") Reset

block scripts
  script(type="text/javascript").
    $(function () {
      var nameInUse = function (name) {
        // console.log('Is name already in use?', email)
        return new Promise(function (resolve, reject) {
          $.getJSON(`/api/by/name/users/${name}`)
            .done(function (data) {
              // console.log('AJAX-DATA:', email, data)
              resolve(true)
            })
            .fail(function () {
              // console.log('AJAX-DATA-FAIL:', email)
              resolve(false)
            })
        })
      }

      var emailInUse = function (email) {
        // console.log('Is email already in use?', email)
        return new Promise(function (resolve, reject) {
          $.getJSON(`/api/by/email/users/${email}`)
            .done(function (data) {
              // console.log('AJAX-DATA:', email, data)
              resolve(true)
            })
            .fail(function () {
              // console.log('AJAX-DATA-FAIL:', email)
              resolve(false)
            })
        })
      }

      $(document).foundation()

      Foundation.Abide.defaults.validators['available_email'] =
      function($el, required, parent) {
        // parameter 1 is jQuery selector
        // console.log('ISINV:', required, $el.val(), $el.data('invalid'))
        return (!required && $el.val() === '') ? true : ($el.data('invalid') !== "")
      }

      Foundation.Abide.defaults.validators['available_name'] =
      function($el, required, parent) {
        // parameter 1 is jQuery selector
        // console.log('ISINV:', required, $el.val(), $el.data('invalid'))
        return (!required && $el.val() === '') ? true : ($el.data('invalid') !== "")
      }

      $('[name=email]').on('input', function () {
        var yeah = $(this).data('invalid')
        // console.log('email input:', yeah)
        if (yeah === '') {
          $('#yup').foundation('removeErrorClasses', $(this))
          $(this).removeData('invalid')
        }
      })

      $('[name=name]').on('input', function () {
        var yeah = $(this).data('invalid')
        // console.log('name input:', yeah)
        if (yeah === '') {
          $('#yup').foundation('removeErrorClasses', $(this))
          $(this).removeData('invalid')
        }
      })

      $(document)
        // field element is invalid
        .on("invalid.zf.abide", function(ev,elem) {
          // console.log("AA-Field name "+elem.attr('name')+" is invalid");
        })
        // field element is valid
        .on("valid.zf.abide", function(ev,elem) {
          var val = elem.val()
          // console.log("Field name "+elem.attr('name')+" is valid " + val)
          if (val === '') { return }
          if (elem.attr('name') === 'email') {
            emailInUse(val)
              .then(function (ret) {
                if (ret) {
                  $('#yup').foundation('addErrorClasses', elem)
                }
              })
          }

          if (elem.attr('name') === 'name') {
            nameInUse(val)
              .then(function (ret) {
                if (ret) {
                  $('#yup').foundation('addErrorClasses', elem)
                }
              })
          }

        })
        // form validation failed
        .on("forminvalid.zf.abide", function(ev,frm) {
          // console.log("FORM id "+ev.target.id+" is INVALID")
        })
        // form validation passed, form will submit if submit event not returned false
        .on("formvalid.zf.abide", function(ev,frm) {
          // console.log("FORM id "+frm.attr('id')+" is VALID")
          // ajax post form
        })
        // to prevent form from submitting upon successful validation
        .on("submit", function(ev) {
          // ev.preventDefault()
          // console.log("Submit for form id "+ev.target.id+" intercepted")
          // $('#yup').foundation('validateForm')
        });
    })
